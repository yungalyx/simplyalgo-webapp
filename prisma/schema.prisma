// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  role String?

  accounts   Account[]
  sessions   Session[]
  strategies Strategy[]
  Post       Post[]

  stripeCustomerId       String?        @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?        @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?        @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?      @map(name: "stripe_current_period_end")
  Subscription           Subscription[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Subscription {
  id           String   @id @default(cuid())
  subscribedAt DateTime @default(now()) @map(name: "subscribed_at")
  strategyId   String
  authorId     String

  strategy Strategy @relation(fields: [strategyId], references: [id])
  author   User     @relation(fields: [authorId], references: [id])
}

model Strategy {
  id        String         @id @default(cuid())
  title     String
  content   Json?
  published Boolean        @default(false)
  status    StrategyStatus @default(DRAFT)

  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  refreshedAt DateTime @default(now()) @map(name: "refreshed_at")

  authorId String
  tags     String[]
  orders   Order[]

  backtestMetrics Json?
  liveMetrics     Json?

  author      User           @relation(fields: [authorId], references: [id])
  subscribers Subscription[]

  @@map(name: "strategies")
}

model Order {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now()) @map(name: "created_at")
  filledAt  DateTime    @default(now()) @map(name: "filled_at")
  status    OrderStatus @default(CREATING)

  strategy   Strategy @relation(fields: [strategyId], references: [id])
  strategyId String
}

enum StrategyStatus {
  DRAFT
  DEPLOYING
  PAPER
  LIVE
  INACTIVE
}

enum OrderStatus {
  CREATING
  ACCEPTED
  FILLED
  CANCELLED

  CANCEL_REQUESTED
  MODIFY_REQUESTED

  PENDING_SYSTEM
  PENDING_EXCHANGE
}
